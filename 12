Step 1 – Install RabbitMQ on Ubuntu
<syntaxhighlight lang=bash>
$ wget -O- https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc | sudo apt-key add -
$ wget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add -

$ echo "deb http://www.rabbitmq.com/debian/ testing main" | sudo tee /etc/apt/sources.list.d/rabbitmq.list

$ sudo apt-get update
$ sudo apt-get install rabbitmq-server
</syntaxhighlight>
Step 2 – Manage RabbitMQ Service
<syntaxhighlight lang=bash>
# Using Init –
$ sudo update-rc.d rabbitmq-server defaults
$ sudo service rabbitmq-server start
$ sudo service rabbitmq-server stop

# Uisng Systemctl –
$ sudo systemctl enable rabbitmq-server
$ sudo systemctl start rabbitmq-server
$ sudo systemctl stop rabbitmq-server
</syntaxhighlight>
Step 3 – Create Admin User in RabbitMQ
<syntaxhighlight lang=bash>
$ sudo rabbitmqctl add_user admin password 
$ sudo rabbitmqctl set_user_tags admin administrator
$ sudo rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"
</syntaxhighlight>
Step 4 – Setup RabbitMQ Web Management Console
<syntaxhighlight lang=bash>
$ sudo rabbitmq-plugins enable rabbitmq_management
</syntaxhighlight>
Step 5 – Connect Web console
<syntaxhighlight lang=bash>
http://172.18.111.110:15672
</syntaxhighlight>

==Setup RabbitMQ Cluster ==

Step1
<syntaxhighlight lang=bash>
$ sudo scp /var/lib/rabbitmq/.erlang.cookie 172.18.111.108:/var/lib/rabbitmq/.erlang.cookie
</syntaxhighlight>

step2: Reset RabbitMQ on Node2
<syntaxhighlight lang=bash>
# Restart RabbitMQ service 
$ systemctl restart rabbitmq-server

# Stop application 
$ rabbitmqctl stop_app

# Reset rabbitmq 
$ rabbitmqctl reset

# Join the node to cluster 
$ rabbitmqctl join_cluster rabbit@s110

# Start the application process
$ rabbitmqctl start_app

</syntaxhighlight>

Step 3: Configure RabbitMQ HA Policy
<syntaxhighlight lang=bash>
$ rabbitmqctl set_policy ha-all "." '{"ha-mode":"all"}'
$ rabbitmqctl list_policies
</syntaxhighlight>

== Publish data==
<syntaxhighlight lang=python>
#!/usr/bin/env python
import pika

credentials = pika.PlainCredentials(username='wisan', password='wisan')

connection = pika.BlockingConnection(
    pika.ConnectionParameters(host='localhost',credentials=credentials))
channel = connection.channel()

channel.queue_declare(queue='hello')

cusname = "Alfreds Futterkiste"
Cont = "Maria Anders"
addr = "Avda. de la Constitucion 2222"
city = "Berlin"
post = "12209"
ctry = "Germany"

for i in range(100000):
        word = '{},{},{},{},{},{}'.format(cusname,Cont,addr,city,post,ctry) 
        channel.basic_publish(exchange='', routing_key='hello', body=word)
        print(" [x] Sent '%s'" % word)
connection.close()
</syntaxhighlight>

== Consume data==
<syntaxhighlight lang=python>
import time
from amqpstorm import Connection

connection = Connection('172.18.111.108', 'wisan', 'wisan')
channel = connection.channel()
channel.queue.declare('hello')
count = 1
while True:
    result = channel.basic.get(queue='hello', no_ack=False)
    if not result:
        print("waiting processing 10 second.")
        time.sleep(10)
        continue
    
    print("Adding Message:", result.body)
    channel.basic.ack(result.method['delivery_tag'])

channel.close()
connection.close()
</syntaxhighlight>

== Insert to mysql # with sqlalchemy + pymysql==
<syntaxhighlight lang=python>
import time
from amqpstorm import Connection
from sqlalchemy import create_engine
import pymysql

con = create_engine('mysql+pymysql://{username}:{password}@172.18.111.41:3306/wisan')

connection = Connection('172.18.111.108', 'wisan', 'wisan')
channel = connection.channel()
channel.queue.declare('hello')
count = 1
while True:
    result = channel.basic.get(queue='hello', no_ack=False)
    if not result:
        print("waiting processing 10 second.")
        time.sleep(10)
        continue
    
   #print("Adding Message:", result.body)
    
    body = result.body
    v = body.split(",")

    sql = 'insert into test (CustomerName,ContactName,Address,City,PostalCode,Country ) values ("{}","{}","{}","{}","{}","{}")'.format(v[0],v[1],v[2],v[3],v[4],v[5])
    con.execute(sql)

    print("Added records:", count)

    channel.basic.ack(result.method['delivery_tag'])
    count += 1

con.close()
channel.close()
connection.close()
</syntaxhighlight>

== Insert to mysql # with mysql connector==
<syntaxhighlight lang=python>
import time
import mysql.connector as mysql
from amqpstorm import Connection

db = mysql.connect(host="172.18.111.41", user="xxx", passwd="xxx", database="wisan")
cursor = db.cursor()

connection = Connection('172.18.111.108', 'wisan', 'wisan')
channel = connection.channel()
channel.queue.declare('hello')
count = 1
while True:
    result = channel.basic.get(queue='hello', no_ack=False)
    if not result:
        break
    
    body = result.body
    v = body.split(",")
    
    values = (v[0],v[1],v[2],v[3],v[4],v[5])
    sql = 'insert into test (CustomerName,ContactName,Address,City,PostalCode,Country ) values (%s,%s,%s,%s,%s,%s)'
    cursor.execute(sql,values)
    db.commit()

    if cursor.rowcount == 1:

        print("Added records:", count)
        count += 1

    channel.basic.ack(result.method['delivery_tag'])

db.close()
channel.close()
connection.close()
</syntaxhighlight>
